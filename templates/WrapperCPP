// File generated by HaxeNXCompiler v[PROGRAM_VERSION]
// WrapperCPP version: 1.2.0

#include <switch.h>

#include <cstdio>

#include <stdio.h>
#include <stdlib.h>
#include <string>

#include <hxcpp.h>

extern "C" void __hxcpp_main();
extern "C" void __hxcpp_lib_main();

extern int _hxcpp_argc;
extern char **_hxcpp_argv;

//////////////////////

alignas(16) u8 __nx_exception_stack[0x1000];
u64 __nx_exception_stack_size = sizeof(__nx_exception_stack);

void __libnx_exception_handler(ThreadExceptionDump *ctx)
{
    std::string hxnxcDefinedProjectName = HAXENXCOMPILER_JSON_SWITCH_PROJECTNAME;

    int i;
    FILE *f = fopen(("sdmc:/HaxeNXCompiler_" + hxnxcDefinedProjectName + "_exception.txt").c_str(), "w");
    if (f == NULL)
        return;

    fprintf(f, "HaxeNXCompiler external logger - Switch ARM CPU Exception:\n");

    fprintf(f, "error_desc: 0x%x\n", ctx->error_desc);
    for (i = 0; i < 29; i++)
        fprintf(f, "[X%d]: 0x%lx\n", i, ctx->cpu_gprs[i].x);
    fprintf(f, "fp: 0x%lx\n", ctx->fp.x);
    fprintf(f, "lr: 0x%lx\n", ctx->lr.x);
    fprintf(f, "sp: 0x%lx\n", ctx->sp.x);
    fprintf(f, "pc: 0x%lx\n", ctx->pc.x);

    fprintf(f, "pstate: 0x%x\n", ctx->pstate);
    fprintf(f, "afsr0: 0x%x\n", ctx->afsr0);
    fprintf(f, "afsr1: 0x%x\n", ctx->afsr1);
    fprintf(f, "esr: 0x%x\n", ctx->esr);

    fprintf(f, "far: 0x%lx\n", ctx->far.x);

    fclose(f);
}

//////////////////////

int main(int argc, char **argv)
{
    _hxcpp_argc = argc;
    _hxcpp_argv = argv;

    HX_TOP_OF_STACK
    hx::Boot();

    try
    {
        __boot_all();
        __hxcpp_main();
    }
    catch (Dynamic e)
    {
        __hx_dump_stack();

        // Try to show a error message
        consoleInit(NULL);

        padConfigureInput(1, HidNpadStyleSet_NpadStandard);

        PadState pad;
        padInitializeDefault(&pad);

        consoleUpdate(NULL);

        std::string hxnxcDefinedVersion = HAXENXCOMPILER_VERSION;
        std::string hxnxcDefinedProjectName = HAXENXCOMPILER_JSON_SWITCH_PROJECTNAME;

        printf("HaxeNXCompiler v%s -- Project: %s\nHAXE HXCPP CRITICAL ERROR!\n\nError: %s\n\n================\nARM CPU Exception saved to [sdmc:/HaxeNXCompiler_%s_exception.txt]\nPress + to return to hbmenu\n",
               hxnxcDefinedVersion.c_str(),
               hxnxcDefinedProjectName.c_str(),
               e == null() ? "null" : e->toString().__CStr(), hxnxcDefinedProjectName.c_str());

        while (appletMainLoop())
        {
            padUpdate(&pad);
            u64 kDown = padGetButtonsDown(&pad);

            if (kDown & HidNpadButton_Plus)
                break; // break in order to return to hbmenu

            consoleUpdate(NULL);
        }
        consoleExit(NULL);
        return -1;
    }

    return 0;
}